resource "kubernetes_namespace" "vault" {
  metadata {
    name = "vault"
  }
}

resource "helm_release" "vault" {
  name       = "vault"
  namespace  = kubernetes_namespace.vault.metadata[0].name
  repository = "https://helm.releases.hashicorp.com"
  chart      = "vault"
  version    = "0.26.0"

  set {
    name  = "server.standalone.enabled"
    value = "true"
  }

  set {
    name  = "injector.enabled"
    value = "false"
  }

  # You can customize other Vault Helm chart values here using 'set' blocks
  # For example, to configure the storage backend to use a persistent volume claim (PVC):
  set {
    name  = "server.persistence.enabled"
    value = "true"
  }

  set {
    name  = "server.persistence.size"
    value = "10Gi"
  }

  set {
    name  = "server.persistence.storageClass"
    value = "standard-rwo" # Replace with your desired storage class
  }

  # Example of setting resource limits and requests:
  set {
    name = "server.resources.requests.cpu"
    value = "500m"
  }

  set {
    name = "server.resources.requests.memory"
    value = "1Gi"
  }

  set {
    name = "server.resources.limits.cpu"
    value = "1"
  }

  set {
    name = "server.resources.limits.memory"
    value = "2Gi"
  }

  # Example of enabling the UI:
  set {
    name  = "ui.enabled"
    value = "true"
  }

  # Example of configuring the UI service type (LoadBalancer for external access):
  set {
    name = "ui.service.type"
    value = "LoadBalancer"
  }

  # Consider security-related configurations like TLS, authentication methods, etc.
  # These will likely require more complex 'values' or a custom values.yaml file.
}
